================
Simple function
================

int five () {
    return 5;
}

---

(source_file
    (function_definition
        (primitive_type)
        (identifier)
        (parameter_list)
        (block
            (return_statement (number))
        )
    )
)


=======================================
Function with modifiers and parameters
=======================================

public virtual int mult (int x, int y, out int z) {
    z = x * y;
    return z;
}

---

(source_file
    (function_definition
        (modifier)
        (modifier)
        (primitive_type)
        (identifier)
        (parameter_list
            (declaration_parameter (primitive_type) (identifier))
            (declaration_parameter (primitive_type) (identifier))
            (declaration_parameter (modifier) (primitive_type) (identifier))
        )
        (block
            (assignment (identifier) (binary_expression (identifier) (identifier)))
            (return_statement (identifier))
        )
    )
)


=============================================
Function with string-value pairs as argument
=============================================

var obj = Object (
              x: 10,
              y: "test"
          );

---

(source_file
    (declaration
        (identifier)
        (function_call
            (identifier)
            (parameter_list
                (instanciation_parameter (identifier) (number))
                (instanciation_parameter (identifier) (string_literal))
            )
        )
    )
)


========================================
Function call with closure as parameter
========================================

my_sorting_algorithm(data, (a, b) => {
    return 0;
});

---

(source_file
    (function_call (identifier) (parameter_list
        (instanciation_parameter (identifier))
        (instanciation_parameter (closure
            (identifier) (identifier) (block
                (return_statement (number))
            )
        ))
    ))
)


==============================
Variable-Length argument list
==============================

void method_with_varargs(int x, ...) {
    // ...
}

---

(source_file
    (function_definition
        (primitive_type)
        (identifier)
        (parameter_list (declaration_parameter (primitive_type) (identifier)) (ellipsis))
        (block
            (comment)
        )
    )
)


=====================
Contract programming
=====================

double method_name(int x, double d)
        requires (x > 0 && x < 10)
        requires (d >= 0.0 && d <= 1.0)
        ensures (result >= 0.0 && result <= 10.0)
{
    return d * x;
}

---

(source_file
    (function_definition (primitive_type) (identifier) (parameter_list
        (declaration_parameter (primitive_type) (identifier))
        (declaration_parameter (primitive_type) (identifier))
    )
    (requires_declarator (binary_expression (binary_expression (identifier) (number)) (binary_expression (identifier) (number))))
    (requires_declarator (binary_expression (binary_expression (identifier) (decimal_literal (number) (number))) (binary_expression (identifier) (decimal_literal (number) (number)))))
    (ensures_declarator (binary_expression (binary_expression (identifier) (decimal_literal (number) (number))) (binary_expression (identifier) (decimal_literal (number) (number)))))
    (block
        (return_statement (binary_expression (identifier) (identifier)))
    ))
)
