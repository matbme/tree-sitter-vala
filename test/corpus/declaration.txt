=======================
Declaration using type
=======================

void declare () {
    int a;
    long b = 1;
}

---

(source_file 
    (function_definition
        (primitive_type)
        (identifier)
        (parameter_list)
        (block
            (declaration (primitive_type) (identifier))
            (declaration (primitive_type) (identifier) (number))
        )
    )
)


======================
Declaration using var
======================

void declare () {
    var c = 5;
}

---

(source_file 
    (function_definition
        (primitive_type)
        (identifier)
        (parameter_list)
        (block
            (declaration (identifier) (number))
        )
    )
)


=================
Enum declaration
=================

enum WindowType {
    TOPLEVEL,
    POPUP
}

---

(source_file
    (enum_declaration 
        (camel_cased_identifier)
        (uppercased_identifier)
        (uppercased_identifier)
    )
)


==================
Array declaration
==================

int[] int_array = { 1, 2, 3 };
int a = int_array[0];

---

(source_file
    (declaration
        (array_identifier (primitive_type))
        (identifier)
        (array_initializer (number) (number) (number))
    )
    (declaration
        (primitive_type)
        (identifier)
        (array_identifier (identifier) (number))
    )
)


=================
Namespaced array
=================

print (my_instance.store[1]);

---

(source_file
    (function_call
        (identifier)
        (parameter_list
            (instanciation_parameter (array_identifier 
                (namespaced_identifier (identifier) (identifier)) 
                (number)
            ))
        )
    )

)


===================
Struct declaration
===================

struct Color {
    public double red;
    public double green;
    public double blue;
}

---

(source_file
    (struct_declaration (camel_cased_identifier) (block
        (declaration (modifier) (primitive_type) (identifier))
        (declaration (modifier) (primitive_type) (identifier))
        (declaration (modifier) (primitive_type) (identifier))
    ))
)
